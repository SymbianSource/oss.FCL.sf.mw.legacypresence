/*
* Copyright (c) 2005-2007 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:    Resource file for XDMPlugin
*
*/




//  RESOURCE IDENTIFIER
NAME    GSXD // 4 letter ID

//  INCLUDES
#include    <bldvariant.hrh>
#include    <avkon.rh>
#include    <avkon.rsg>
#include    <avkon.mbg>
#include    <eikcore.rsg>
#include    <eikon.rh>
#include    <eikon.rsg>
#include    <avkon.loc>
#include    <data_caging_paths_strings.hrh>
#include    <appinfo.rh>

#include    <gsxdmplugin.loc>
#include    "XDMPlugin.hrh"

// CONSTANTS
//----------------------------------------------------
//   
//    
//    Needed or loading the resource fails!
//
//----------------------------------------------------
//
RESOURCE RSS_SIGNATURE
    {
    }
    
//----------------------------------------------------
//   
//    r_gs_xdm_settings_main_menubar
//    Menu when main list is visible
//
//----------------------------------------------------
//
RESOURCE MENU_BAR r_gs_xdm_settings_main_menubar
    {
    titles =
        {
        MENU_TITLE { menu_pane = r_gs_xdm_settings_main_menu;}
        };
    }

//----------------------------------------------------
//   
//    r_gs_xdm_settings_main_menu
//    Main menu when we enter in XDM settings
//
//----------------------------------------------------
//
RESOURCE MENU_PANE r_gs_xdm_settings_main_menu
    {
    items =
        {
        MENU_ITEM { command = EGSXDMPluginCmdChange; txt = qtn_xdm_settings_change; },
        MENU_ITEM { command = EGSXDMPluginCmdEdit; txt = qtn_xdm_options_edit_set; },
        MENU_ITEM { command = EGSXDMPluginCmdNewSettings; 
                cascade = r_gs_xdm_new_settings_menu; txt = qtn_xdm_options_new_set; },
        MENU_ITEM { command = EGSXDMPluginCmdDelete; txt = qtn_xdm_options_delete; },
        MENU_ITEM { command = EAknCmdHelp; txt = qtn_options_help; },   
        MENU_ITEM { command = EGSXDMPluginCmdExitFromSL; txt = qtn_options_exit; },     
        MENU_ITEM { command = EAknCmdExit; txt = qtn_options_exit; }     
        };
    }

//----------------------------------------------------
//   
//    r_gs_xdm_new_settings_menu
//    case menu
//
//----------------------------------------------------
//    
RESOURCE MENU_PANE r_gs_xdm_new_settings_menu
    {
    items =
        {
        MENU_ITEM { command = EGSXDMPluginCmdNewDefault; txt = qtn_xdm_options_new_sub_default; },
        MENU_ITEM { command = EGSXDMPluginCmdNewExisting; txt = qtn_xdm_options_new_sub_existing; }        
        };
    }
    
//----------------------------------------------------
//   
//    r_gs_xdm_main_view_title
//    XDM view's title.
//
//----------------------------------------------------
//
RESOURCE TITLE_PANE r_gs_xdm_main_view_title
    {
    txt = qtn_xdm_title;
    }
    
//----------------------------------------------------
//   
//    r_gs_xdm_main_view
//    XDM plugin main view.
//
//----------------------------------------------------
//
RESOURCE AVKON_VIEW r_gs_xdm_main_view
    {
    menubar = r_gs_xdm_settings_main_menubar;
    cba = r_xdmui_mainview_softkeys;//R_AVKON_SOFTKEYS_OPTIONS_BACK;  
    }
    
//----------------------------------------------------
//   
//    r_xdmui_mainview_softkeys
//    XDM plugin main view softkeys.
//
//----------------------------------------------------
//  
RESOURCE CBA r_xdmui_mainview_softkeys
    {
    flags = 0;
    buttons = 
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt= text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyBack; txt= text_softkey_back;},
        CBA_BUTTON {id=EGSXDMPluginCmdEdit; txt= qtn_msk_edit;}
        };
     }
     
//----------------------------------------------------
//   
//    r_xdmui_mainview_softkeys_sl
//    XDM plugin main view softkeys for settings list
//
//----------------------------------------------------
//  
RESOURCE CBA r_xdmui_mainview_softkeys_sl
    {
    flags = 0;
    buttons = 
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt= text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyBack; txt= text_softkey_back;},
        CBA_BUTTON {id=EGSXDMPluginCmdChange; txt= qtn_msk_change;}
        };
    }

// ---------------------------------------------------------
//   
// r_settings
//
// settings list - collection of all setting types
//   
// ---------------------------------------------------------
//
RESOURCE LISTBOX r_gs_xdm_main_list
    {
    flags = EAknListBoxSelectionList;        
    }   

    
// ---------------------------------------------------------
//   
// r_settings
//
// settings list - collection of all setting types
//   
// ---------------------------------------------------------
//   

RESOURCE AVKON_SETTING_ITEM_LIST r_settings
    {
    flags = EAknSettingItemIncludeHiddenInOrdinal;
    title = qtn_xdm_title;
    items = 
        {
        AVKON_SETTING_ITEM
            {
            identifier = ESettingItemSettingName;
            setting_page_resource = r_server_name_editor_page;
            name = qtn_xdm_settings_set_name;
            compulsory_ind_string = qtn_xdm_compulsory_indicator;
            empty_item_text = qtn_xdm_settings_must_define;
            },
        AVKON_SETTING_ITEM
            {
            identifier = ESettingItemAccessPoint;
            setting_page_resource = r_accesspoint_editor_page;
            name = qtn_xdm_settings_access_point;
            compulsory_ind_string = qtn_xdm_compulsory_indicator;
            empty_item_text = qtn_xdm_settings_must_define;
            },
        AVKON_SETTING_ITEM
            {
            identifier = ESettingItemServerAddress;
            setting_page_resource = r_server_address_editor_page;
            name = qtn_xdm_settings_address;
            compulsory_ind_string = qtn_xdm_compulsory_indicator;
            empty_item_text = qtn_xdm_settings_must_define;
            },
        AVKON_SETTING_ITEM
            {
            identifier = ESettingItemSipURL;
            setting_page_resource = r_sip_url_editor_page;
            name = qtn_xdm_settings_sip;
            },
        AVKON_SETTING_ITEM
            {
            identifier = ESettingItemUserID;
            setting_page_resource = r_user_id_editor_page;
            name = qtn_xdm_settings_username;
            compulsory_ind_string = qtn_xdm_compulsory_indicator;
            empty_item_text = qtn_xdm_settings_must_define;
            },
        AVKON_SETTING_ITEM
            {
            identifier = ESettingItemPassword;
            setting_page_resource = r_password_editor_page;
            name = qtn_xdm_settings_password;
            empty_item_text = qtn_xdm_text_password;
            }
        };
    }

// ---------------------------------------------------------
//   
// Settings Pages
//
// defines the AVKON_SETTING_PAGE structures referred to in 
// setting_page_resource fields above.
// 
// These structures define the way in which the editors used
// to change the setting data are presented.
// 
// ---------------------------------------------------------
//   
RESOURCE AVKON_SETTING_PAGE r_server_name_editor_page
    {
    label= qtn_xdm_settings_set_name;
    type = EEikCtEdwin;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    invalid_contents_softkey_resource = R_AVKON_SOFTKEYS_CANCEL;
    editor_resource_id = r_server_name_editor;
    }
  
RESOURCE AVKON_SETTING_PAGE r_server_address_editor_page
    {
    label= qtn_xdm_settings_address;
    type = EEikCtEdwin;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    invalid_contents_softkey_resource = R_AVKON_SOFTKEYS_CANCEL;
    editor_resource_id = r_server_address_editor;
    }


RESOURCE AVKON_SETTING_PAGE r_accesspoint_editor_page
    {
    label= qtn_xdm_settings_access_point;
    type = EEikCtEdwin;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    invalid_contents_softkey_resource = R_AVKON_SOFTKEYS_CANCEL;
    editor_resource_id = r_accesspoint_editor;
    }
    
RESOURCE AVKON_SETTING_PAGE r_sip_url_editor_page
    {
    label= qtn_xdm_settings_sip;
    type = EEikCtEdwin;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    invalid_contents_softkey_resource = R_AVKON_SOFTKEYS_CANCEL;
    editor_resource_id = r_sip_url_editor;
    }
  
RESOURCE AVKON_SETTING_PAGE r_user_id_editor_page
    {
    label= qtn_xdm_settings_username;
    type = EEikCtEdwin;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    invalid_contents_softkey_resource = R_AVKON_SOFTKEYS_CANCEL;
    editor_resource_id = r_user_id_editor;
    }
  
RESOURCE AVKON_SETTING_PAGE r_password_editor_page
    {
    label= qtn_xdm_settings_password;
    type = EEikCtSecretEd;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    invalid_contents_softkey_resource = R_AVKON_SOFTKEYS_CANCEL;
    editor_resource_id = r_password_editor;
    }

RESOURCE EDWIN r_user_id_editor
    {
    flags = EEikEdwinAutoSelection | EAknEditorLowerCase | EEikEdwinNoLineOrParaBreaks;
    allowed_case_modes = EAknEditorLowerCase | EAknEditorUpperCase;
    numeric_keymap=EAknEditorCalculatorNumberModeKeymap;
    allowed_input_modes = EAknEditorTextInputMode | EAknEditorNumericInputMode;
    default_input_mode = EAknEditorTextInputMode;
    special_character_table = R_AVKON_URL_SPECIAL_CHARACTER_TABLE_DIALOG;
    default_case = EAknEditorLowerCase;
    avkon_flags = EAknEditorFlagLatinInputModesOnly;
    width = 0;
    lines = 0;
    maxlength = KMaxUserIDLength;
    }
  
RESOURCE SECRETED r_password_editor
    {
    num_letters = KMaxPasswordLength;
    }

RESOURCE EDWIN r_server_address_editor
    {
    flags = EEikEdwinAutoSelection | EAknEditorLowerCase | EEikEdwinNoLineOrParaBreaks;
    allowed_case_modes = EAknEditorLowerCase | EAknEditorUpperCase;
    numeric_keymap=EAknEditorCalculatorNumberModeKeymap;
    allowed_input_modes = EAknEditorTextInputMode | EAknEditorNumericInputMode;
    default_input_mode = EAknEditorTextInputMode;
    special_character_table = R_AVKON_URL_SPECIAL_CHARACTER_TABLE_DIALOG;
    default_case = EAknEditorLowerCase;
    avkon_flags = EAknEditorFlagLatinInputModesOnly;
    width = 0;
    lines = 0;
    maxlength = KMaxServerAddressLength;
    }
  
RESOURCE EDWIN r_accesspoint_editor
    {
    maxlength = KMaxAccessPointNameLength;
    }
  
RESOURCE EDWIN r_server_name_editor
    {
    width = 0;
    lines = 0;
    flags = EEikEdwinNoLineOrParaBreaks;
    maxlength = KMaxSettingSetNameLength;
    }
  
RESOURCE EDWIN r_sip_url_editor
    {
    width = 0;
    lines = 0;
    maxlength = KMaxSIPURLLength;
    }


RESOURCE DIALOG r_confirmation_query
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_YES_NO;
    items=
        {
        DLG_LINE 
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout =EConfirmationQueryLayout;
                };
            }
        };
    }
  
//----------------------------------------------------
//   
//    string resouces
//    the strings can be localized in loc file
//
//----------------------------------------------------
//    
RESOURCE TBUF r_str_xdm_settings { buf = qtn_xdm_title; }
RESOURCE TBUF r_str_xdm_compulsory { buf = qtn_selec_setting_compulsory; }
RESOURCE TBUF r_str_xdm_must_define { buf = qtn_poc_settings_must_define; }
RESOURCE TBUF r_str_xdm_use_existing { buf = qtn_xdm_propmt_use_exist; }
RESOURCE TBUF r_str_xdm_empty_text { buf = qtn_xdm_main_empty_info_text; }
RESOURCE TBUF r_str_xdm_empty_text_sec { buf = qtn_xdm_main_empty_info_text_secondary; }
RESOURCE TBUF r_str_xdm_new_set { buf = qtn_xdm_text_new_set; }
RESOURCE TBUF r_str_xdm_new_set_many { buf = qtn_xdm_text_new_set_many; }
RESOURCE TBUF r_str_xdm_conf_delete_last { buf = qtn_xdm_conf_delete_last; }
RESOURCE TBUF r_str_xdm_conf_delete { buf = qtn_query_common_conf_delete; }
RESOURCE TBUF r_str_xdm_conf_compulsory { buf = qtn_xdm_compulsory_query_info_text; }
RESOURCE TBUF r_str_xdm_title_pane_text { buf = qtn_xdm_title; }
RESOURCE TBUF r_str_xdm_name_already_exist { buf = qtn_xdm_set_already_exist_info; }
RESOURCE TBUF r_str_xdm_ap_name_for_debug_only { buf = qtn_xdm_settings_access_point;}

// ******  PDATA RESOURCES END     ******
//End of File
